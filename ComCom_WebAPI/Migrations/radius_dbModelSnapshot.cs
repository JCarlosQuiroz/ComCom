// <auto-generated />
using System;
using ComCom_WebAPI.Models.DataMS;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ComCom_WebAPI.Migrations
{
    [DbContext(typeof(radius_db))]
    partial class radius_dbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.nas", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("apipassword")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("apiusername")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<int>("apiver")
                        .HasColumnType("int");

                    b.Property<bool>("ciscobwmode")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("coamode")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("community")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasDefaultValueSql("'RADIUS Client'");

                    b.Property<string>("nasname")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<int?>("ports")
                        .HasColumnType("int");

                    b.Property<string>("secret")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasDefaultValueSql("'secret'");

                    b.Property<string>("shortname")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("starospassword")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("type")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasDefaultValueSql("'other'");

                    b.HasKey("id");

                    b.HasIndex(new[] { "nasname" }, "nasname");

                    b.ToTable("Nas");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.radacct", b =>
                {
                    b.Property<long>("radacctid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("_accttime")
                        .HasColumnType("datetime");

                    b.Property<int?>("_apid")
                        .HasColumnType("int");

                    b.Property<bool?>("_dailynextsrvactive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("_srvid")
                        .HasColumnType("int");

                    b.Property<string>("acctauthentic")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<long?>("acctinputoctets")
                        .HasColumnType("bigint");

                    b.Property<long?>("acctoutputoctets")
                        .HasColumnType("bigint");

                    b.Property<string>("acctsessionid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("''");

                    b.Property<int?>("acctsessiontime")
                        .HasColumnType("int");

                    b.Property<int?>("acctstartdelay")
                        .HasColumnType("int");

                    b.Property<DateTime?>("acctstarttime")
                        .HasColumnType("datetime");

                    b.Property<int?>("acctstopdelay")
                        .HasColumnType("int");

                    b.Property<DateTime?>("acctstoptime")
                        .HasColumnType("datetime");

                    b.Property<string>("acctterminatecause")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("acctuniqueid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("calledstationid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("callingstationid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("connectinfo_start")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("connectinfo_stop")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("framedipaddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("framedprotocol")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("groupname")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("nasipaddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("nasportid")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("nasporttype")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("realm")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("servicetype")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("username")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("xascendsessionsvrkey")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("radacctid");

                    b.HasIndex(new[] { "_accttime" }, "_AcctTime");

                    b.HasIndex(new[] { "acctsessionid" }, "acctsessionid");

                    b.HasIndex(new[] { "acctsessiontime" }, "acctsessiontime");

                    b.HasIndex(new[] { "acctstarttime" }, "acctstarttime");

                    b.HasIndex(new[] { "acctstoptime" }, "acctstoptime");

                    b.HasIndex(new[] { "acctuniqueid" }, "acctuniqueid");

                    b.HasIndex(new[] { "callingstationid" }, "callingstationid");

                    b.HasIndex(new[] { "framedipaddress" }, "framedipaddress");

                    b.HasIndex(new[] { "nasipaddress" }, "nasipaddress");

                    b.HasIndex(new[] { "username" }, "username");

                    b.ToTable("Radacct");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.radcheck", b =>
                {
                    b.Property<uint>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<string>("attribute")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("op")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasDefaultValueSql("'=='")
                        .IsFixedLength();

                    b.Property<string>("username")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("value")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(253)
                        .HasColumnType("varchar(253)")
                        .HasDefaultValueSql("''");

                    b.HasKey("id");

                    b.HasIndex(new[] { "username" }, "username")
                        .HasDatabaseName("username1");

                    b.ToTable("Radcheck");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.radgroupcheck", b =>
                {
                    b.Property<uint>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<string>("attribute")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("groupname")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("op")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasDefaultValueSql("'=='")
                        .IsFixedLength();

                    b.Property<string>("value")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(253)
                        .HasColumnType("varchar(253)")
                        .HasDefaultValueSql("''");

                    b.HasKey("id");

                    b.HasIndex(new[] { "groupname" }, "groupname");

                    b.ToTable("Radgroupcheck");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.radgroupreply", b =>
                {
                    b.Property<uint>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<string>("attribute")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("groupname")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("op")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasDefaultValueSql("'='")
                        .IsFixedLength();

                    b.Property<string>("value")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(253)
                        .HasColumnType("varchar(253)")
                        .HasDefaultValueSql("''");

                    b.HasKey("id");

                    b.HasIndex(new[] { "groupname" }, "groupname")
                        .HasDatabaseName("groupname1");

                    b.ToTable("Radgroupreply");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.radippool", b =>
                {
                    b.Property<uint>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<string>("calledstationid")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("callingstationid")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("expiry_time")
                        .HasColumnType("datetime");

                    b.Property<string>("framedipaddress")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("nasipaddress")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("pool_key")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("pool_name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("id");

                    b.ToTable("Radippool");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.radpostauth", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("authdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("nasipaddress")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("pass")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("reply")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("username")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("''");

                    b.HasKey("id");

                    b.HasIndex(new[] { "authdate" }, "authdate");

                    b.HasIndex(new[] { "nasipaddress" }, "nasipaddress")
                        .HasDatabaseName("nasipaddress1");

                    b.HasIndex(new[] { "username" }, "username")
                        .HasDatabaseName("username2");

                    b.ToTable("Radpostauth");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.radreply", b =>
                {
                    b.Property<uint>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<string>("attribute")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("op")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasDefaultValueSql("'='")
                        .IsFixedLength();

                    b.Property<string>("username")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("value")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(253)
                        .HasColumnType("varchar(253)")
                        .HasDefaultValueSql("''");

                    b.HasKey("id");

                    b.HasIndex(new[] { "username" }, "username")
                        .HasDatabaseName("username3");

                    b.ToTable("Radreply");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.radusergroup", b =>
                {
                    b.Property<string>("groupname")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("''");

                    b.Property<int>("priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("username")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("''");

                    b.HasIndex(new[] { "username" }, "username");

                    b.ToTable("Radusergroup");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.rm_actsrv", b =>
                {
                    b.Property<bool>("dailynextsrvactive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("datetime")
                        .HasColumnType("datetime");

                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("srvid")
                        .HasColumnType("int");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasIndex(new[] { "datetime" }, "datetime");

                    b.HasIndex(new[] { "id" }, "id")
                        .IsUnique();

                    b.HasIndex(new[] { "username" }, "username");

                    b.ToTable("Rm_actsrv");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.rm_allowedmanagers", b =>
                {
                    b.Property<string>("managername")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("srvid")
                        .HasColumnType("int");

                    b.HasIndex(new[] { "managername" }, "managername");

                    b.HasIndex(new[] { "srvid" }, "srvid");

                    b.ToTable("Rm_allowedmanagers");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.rm_allowednases", b =>
                {
                    b.Property<int>("nasid")
                        .HasColumnType("int");

                    b.Property<int>("srvid")
                        .HasColumnType("int");

                    b.HasIndex(new[] { "nasid" }, "nasid");

                    b.HasIndex(new[] { "srvid" }, "srvid");

                    b.ToTable("Rm_allowednases");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.rm_ap", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("accessmode")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("apipassword")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("apiusername")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("community")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("enable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ip")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("id");

                    b.HasIndex(new[] { "ip" }, "ip");

                    b.ToTable("Rm_ap");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.rm_cards", b =>
                {
                    b.Property<long>("id")
                        .HasColumnType("bigint");

                    b.Property<bool>("active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("cardnum")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<bool>("cardtype")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("comblimit")
                        .HasColumnType("bigint");

                    b.Property<string>("date")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("downlimit")
                        .HasColumnType("bigint");

                    b.Property<string>("expiration")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("expiretime")
                        .HasColumnType("bigint");

                    b.Property<string>("owner")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<bool>("revoked")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("series")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<int>("srvid")
                        .HasColumnType("int");

                    b.Property<bool>("timebaseexp")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("timebaseonline")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("transid")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<long>("uplimit")
                        .HasColumnType("bigint");

                    b.Property<long>("uptimelimit")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("used")
                        .HasColumnType("datetime");

                    b.Property<decimal>("value")
                        .HasPrecision(22, 2)
                        .HasColumnType("decimal(22,2)");

                    b.HasKey("id");

                    b.HasIndex(new[] { "cardnum" }, "cardnum")
                        .IsUnique();

                    b.HasIndex(new[] { "owner" }, "owner");

                    b.HasIndex(new[] { "series" }, "series");

                    b.HasIndex(new[] { "used" }, "used");

                    b.ToTable("Rm_cards");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.rm_changesrv", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("newsrvid")
                        .HasColumnType("int");

                    b.Property<string>("newsrvname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("requestdate")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("requested")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("scheduledate")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("transid")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("id");

                    b.HasIndex(new[] { "requestdate" }, "requestdate");

                    b.HasIndex(new[] { "scheduledate" }, "scheduledate");

                    b.ToTable("Rm_changesrv");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.rm_cmts", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("community")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("descr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ip")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("id");

                    b.HasIndex(new[] { "ip" }, "ip")
                        .HasDatabaseName("ip1");

                    b.ToTable("Rm_cmts");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.rm_colsetlistdocsis", b =>
                {
                    b.Property<string>("colname")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("managername")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasIndex(new[] { "managername" }, "managername");

                    b.ToTable("Rm_colsetlistdocsis");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.rm_colsetlistradius", b =>
                {
                    b.Property<string>("colname")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("managername")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasIndex(new[] { "managername" }, "managername");

                    b.ToTable("Rm_colsetlistradius");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.rm_colsetlistusers", b =>
                {
                    b.Property<string>("colname")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("managername")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasIndex(new[] { "managername" }, "managername");

                    b.ToTable("Rm_colsetlistusers");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.rm_dailyacct", b =>
                {
                    b.Property<int>("acctsessiontime")
                        .HasColumnType("int");

                    b.Property<DateTime>("acctstarttime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("acctstoptime")
                        .HasColumnType("datetime");

                    b.Property<string>("acctuniqueid")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<long>("dlbytes")
                        .HasColumnType("bigint");

                    b.Property<long>("dlbytesstart")
                        .HasColumnType("bigint");

                    b.Property<long>("dlbytesstop")
                        .HasColumnType("bigint");

                    b.Property<long>("radacctid")
                        .HasColumnType("bigint");

                    b.Property<long>("ulbytes")
                        .HasColumnType("bigint");

                    b.Property<long>("ulbytesstart")
                        .HasColumnType("bigint");

                    b.Property<long>("ulbytesstop")
                        .HasColumnType("bigint");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasIndex(new[] { "acctuniqueid" }, "acctuniqueid");

                    b.HasIndex(new[] { "radacctid" }, "radacctid");

                    b.HasIndex(new[] { "username" }, "username");

                    b.ToTable("Rm_dailyacct");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.rm_ias", b =>
                {
                    b.Property<int>("iasid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<long>("comblimit")
                        .HasColumnType("bigint");

                    b.Property<long>("downlimit")
                        .HasColumnType("bigint");

                    b.Property<bool>("enableias")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("expiration")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("expiremode")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("expiretime")
                        .HasColumnType("bigint");

                    b.Property<string>("iasname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("price")
                        .HasPrecision(20, 2)
                        .HasColumnType("decimal(20,2)");

                    b.Property<int>("simuse")
                        .HasColumnType("int");

                    b.Property<int>("srvid")
                        .HasColumnType("int");

                    b.Property<bool>("timebaseexp")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("timebaseonline")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("uplimit")
                        .HasColumnType("bigint");

                    b.Property<long>("uptimelimit")
                        .HasColumnType("bigint");

                    b.HasKey("iasid")
                        .HasName("PRIMARY");

                    b.ToTable("Rm_ias");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.rm_invoices", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("advtax")
                        .HasPrecision(25, 6)
                        .HasColumnType("decimal(25,6)");

                    b.Property<decimal>("advtaxpercent")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.Property<decimal>("amount")
                        .HasPrecision(13, 2)
                        .HasColumnType("decimal(13,2)");

                    b.Property<decimal>("balance")
                        .HasPrecision(20, 2)
                        .HasColumnType("decimal(20,2)");

                    b.Property<long>("bytescomb")
                        .HasColumnType("bigint");

                    b.Property<long>("bytesdl")
                        .HasColumnType("bigint");

                    b.Property<long>("bytesul")
                        .HasColumnType("bigint");

                    b.Property<bool>("capdate")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("capdl")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("captime")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("captotal")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("capul")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("comblimit")
                        .HasColumnType("bigint");

                    b.Property<string>("comment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("date")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("days")
                        .HasColumnType("int");

                    b.Property<long>("downlimit")
                        .HasColumnType("bigint");

                    b.Property<string>("expiration")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("fullname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("gwtransid")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("invgroup")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("invnum")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<bool>("invtype")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("managername")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("mobile")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("paid")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("paymentopt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<sbyte>("paymode")
                        .HasColumnType("tinyint");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<decimal>("price")
                        .HasPrecision(25, 6)
                        .HasColumnType("decimal(25,6)");

                    b.Property<string>("remark")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("service")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("state")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("tax")
                        .HasPrecision(25, 6)
                        .HasColumnType("decimal(25,6)");

                    b.Property<string>("taxid")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<int>("time")
                        .HasColumnType("int");

                    b.Property<string>("transid")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<long>("uplimit")
                        .HasColumnType("bigint");

                    b.Property<long>("uptimelimit")
                        .HasColumnType("bigint");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<decimal>("vatpercent")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.Property<string>("zip")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.HasKey("id");

                    b.HasIndex(new[] { "comment" }, "comment");

                    b.HasIndex(new[] { "date" }, "date");

                    b.HasIndex(new[] { "gwtransid" }, "gwtransid");

                    b.HasIndex(new[] { "invgroup" }, "invgroup");

                    b.HasIndex(new[] { "invnum" }, "invnum");

                    b.HasIndex(new[] { "managername" }, "managername");

                    b.HasIndex(new[] { "paid" }, "paid");

                    b.HasIndex(new[] { "paymode" }, "paymode");

                    b.HasIndex(new[] { "username" }, "username")
                        .HasDatabaseName("username4");

                    b.ToTable("Rm_invoices");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.rm_ippools", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("descr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("fromip")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<int>("nextpoolid")
                        .HasColumnType("int");

                    b.Property<string>("toip")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<bool>("type")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("id");

                    b.HasIndex(new[] { "name" }, "name");

                    b.HasIndex(new[] { "nextpoolid" }, "nextid");

                    b.ToTable("Rm_ippools");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.rm_managers", b =>
                {
                    b.Property<string>("managername")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("balance")
                        .HasPrecision(20, 2)
                        .HasColumnType("decimal(20,2)");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("comment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("enablemanager")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("lang")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("mobile")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("perm_accessap")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("perm_addcredits")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("perm_allowdiscount")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("perm_allusers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("perm_cardsys")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("perm_createmanagers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("perm_createservices")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("perm_createusers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("perm_cts")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("perm_deletemanagers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("perm_deleteservices")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("perm_deleteusers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("perm_editinvoice")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("perm_editmanagers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("perm_editservices")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("perm_editusers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("perm_edituserspriv")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("perm_email")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("perm_enwriteoff")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("perm_listallinvoices")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("perm_listinvoices")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("perm_listmanagers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("perm_listonlineusers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("perm_listservices")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("perm_listusers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("perm_logout")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("perm_negbalance")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("perm_showinvtotals")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("perm_sms")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("perm_trafficreport")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("state")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("vatid")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("zip")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.HasKey("managername")
                        .HasName("PRIMARY");

                    b.ToTable("Rm_managers");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.rm_newusers", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("actcode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("actcount")
                        .HasColumnType("int");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("lang")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("mobile")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("srvid")
                        .HasColumnType("int");

                    b.Property<string>("state")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("vatid")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("zip")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.HasKey("id");

                    b.ToTable("Rm_newusers");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.rm_onlinecm", b =>
                {
                    b.Property<string>("username")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("''");

                    b.Property<int?>("cmtsid")
                        .HasColumnType("int");

                    b.Property<bool?>("enableuser")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("groupid")
                        .HasColumnType("int");

                    b.Property<string>("groupname")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ifidx")
                        .HasColumnType("int");

                    b.Property<string>("ipcpe")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<bool?>("ipmodecpe")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("maccm")
                        .HasMaxLength(17)
                        .HasColumnType("varchar(17)");

                    b.Property<string>("maccpe")
                        .HasMaxLength(17)
                        .HasColumnType("varchar(17)");

                    b.Property<decimal?>("pingtime")
                        .HasPrecision(11, 1)
                        .HasColumnType("decimal(11,1)");

                    b.Property<decimal?>("rxpwr")
                        .HasPrecision(11, 1)
                        .HasColumnType("decimal(11,1)");

                    b.Property<decimal?>("snrds")
                        .HasPrecision(11, 1)
                        .HasColumnType("decimal(11,1)");

                    b.Property<decimal?>("snrus")
                        .HasPrecision(11, 1)
                        .HasColumnType("decimal(11,1)");

                    b.Property<string>("staticipcm")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("timestamp")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal?>("txpwr")
                        .HasPrecision(11, 1)
                        .HasColumnType("decimal(11,1)");

                    b.Property<string>("upstreamname")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("username")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "groupname" }, "groupname")
                        .HasDatabaseName("groupname2");

                    b.HasIndex(new[] { "ipcpe" }, "ipcpe");

                    b.HasIndex(new[] { "maccm" }, "maccm");

                    b.HasIndex(new[] { "staticipcm" }, "staticipcm");

                    b.ToTable("Rm_onlinecm");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.rm_phpsess", b =>
                {
                    b.Property<bool?>("closed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ip")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("lastact")
                        .HasColumnType("datetime");

                    b.Property<string>("managername")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("sessid")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasIndex(new[] { "managername" }, "managername");

                    b.ToTable("Rm_phpsess");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.rm_radacct", b =>
                {
                    b.Property<int>("acctsessiontime")
                        .HasColumnType("int");

                    b.Property<decimal>("acctsessiontimeratio")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<DateTime>("acctstarttime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("acctstoptime")
                        .HasColumnType("datetime");

                    b.Property<string>("acctuniqueid")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<long>("dlbytes")
                        .HasColumnType("bigint");

                    b.Property<long>("dlbytesstart")
                        .HasColumnType("bigint");

                    b.Property<long>("dlbytesstop")
                        .HasColumnType("bigint");

                    b.Property<decimal>("dlratio")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<long>("radacctid")
                        .HasColumnType("bigint");

                    b.Property<long>("ulbytes")
                        .HasColumnType("bigint");

                    b.Property<long>("ulbytesstart")
                        .HasColumnType("bigint");

                    b.Property<long>("ulbytesstop")
                        .HasColumnType("bigint");

                    b.Property<decimal>("ulratio")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasIndex(new[] { "acctstarttime" }, "acctstarttime");

                    b.HasIndex(new[] { "acctstoptime" }, "acctstoptime");

                    b.HasIndex(new[] { "acctuniqueid" }, "acctuniqueid");

                    b.HasIndex(new[] { "radacctid" }, "radacctid");

                    b.HasIndex(new[] { "username" }, "username");

                    b.ToTable("Rm_radacct");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.rm_services", b =>
                {
                    b.Property<int>("srvid")
                        .HasColumnType("int");

                    b.Property<int>("addamount")
                        .HasColumnType("int");

                    b.Property<bool>("advcmcfg")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("availucp")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("carryover")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("cmcfg")
                        .IsRequired()
                        .HasMaxLength(10240)
                        .HasColumnType("varchar(10240)");

                    b.Property<long>("combquota")
                        .HasColumnType("bigint");

                    b.Property<string>("custattr")
                        .IsRequired()
                        .HasMaxLength(10240)
                        .HasColumnType("varchar(10240)");

                    b.Property<int>("dailynextsrvid")
                        .HasColumnType("int");

                    b.Property<string>("descr")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("disnextsrvid")
                        .HasColumnType("int");

                    b.Property<int>("dlburstlimit")
                        .HasColumnType("int");

                    b.Property<int>("dlburstthreshold")
                        .HasColumnType("int");

                    b.Property<int>("dlbursttime")
                        .HasColumnType("int");

                    b.Property<long>("dlquota")
                        .HasColumnType("bigint");

                    b.Property<int>("downrate")
                        .HasColumnType("int");

                    b.Property<bool>("enableburst")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("enableservice")
                        .HasColumnType("int");

                    b.Property<bool>("enaddcredits")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("gentftp")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ignstatip")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("initdl")
                        .HasColumnType("int");

                    b.Property<int>("inittimeexp")
                        .HasColumnType("int");

                    b.Property<int>("inittimeonline")
                        .HasColumnType("int");

                    b.Property<int>("inittotal")
                        .HasColumnType("int");

                    b.Property<int>("initul")
                        .HasColumnType("int");

                    b.Property<bool>("limitcomb")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("limitdl")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("limitexpiration")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("limitul")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("limituptime")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("minamount")
                        .HasColumnType("int");

                    b.Property<int>("minamountadd")
                        .HasColumnType("int");

                    b.Property<bool>("monthly")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("nextsrvid")
                        .HasColumnType("int");

                    b.Property<string>("policymapdl")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("policymapul")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("poolname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("pricecalcdownload")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("pricecalcupload")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("pricecalcuptime")
                        .HasColumnType("tinyint(1)");

                    b.Property<short>("priority")
                        .HasColumnType("smallint");

                    b.Property<bool>("renew")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("resetctrdate")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("resetctrneg")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("srvname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("srvtype")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("timeaddmodeexp")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("timeaddmodeonline")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("timebaseexp")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("timebaseonline")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("timequota")
                        .HasColumnType("bigint");

                    b.Property<int>("timeunitexp")
                        .HasColumnType("int");

                    b.Property<int>("timeunitonline")
                        .HasColumnType("int");

                    b.Property<bool>("trafficaddmode")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("trafficunitcomb")
                        .HasColumnType("int");

                    b.Property<int>("trafficunitdl")
                        .HasColumnType("int");

                    b.Property<int>("trafficunitul")
                        .HasColumnType("int");

                    b.Property<int>("ulburstlimit")
                        .HasColumnType("int");

                    b.Property<int>("ulburstthreshold")
                        .HasColumnType("int");

                    b.Property<int>("ulbursttime")
                        .HasColumnType("int");

                    b.Property<long>("ulquota")
                        .HasColumnType("bigint");

                    b.Property<decimal>("unitprice")
                        .HasPrecision(25, 6)
                        .HasColumnType("decimal(25,6)");

                    b.Property<decimal>("unitpriceadd")
                        .HasPrecision(25, 6)
                        .HasColumnType("decimal(25,6)");

                    b.Property<decimal>("unitpriceaddtax")
                        .HasPrecision(25, 6)
                        .HasColumnType("decimal(25,6)");

                    b.Property<decimal>("unitpricetax")
                        .HasPrecision(25, 6)
                        .HasColumnType("decimal(25,6)");

                    b.Property<int>("uprate")
                        .HasColumnType("int");

                    b.HasKey("srvid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "srvname" }, "srvname");

                    b.ToTable("Rm_services");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.rm_settings", b =>
                {
                    b.Property<decimal>("advtaxpercent")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.Property<sbyte>("billingstart")
                        .HasColumnType("tinyint");

                    b.Property<bool>("buycreditsucp")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("captcha")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("changepswucp")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("changesrv")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("currency")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("defgrpid")
                        .HasColumnType("int");

                    b.Property<bool>("disableexpcont")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("disablenotpaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("disconnmethod")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("disconnpostpaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("diskquota")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("edituserdata")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("emailexpiry")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("emailnewsrv")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("emailrenew")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("emailselfregman")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("emailwelcome")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("expalertmode")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("hidelimits")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ias_email")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ias_endupemail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ias_endupmobile")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ias_mobile")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ias_verify")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("maclock")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("newmanallsrv")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("newnasallsrv")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("paymentopt")
                        .HasColumnType("int");

                    b.Property<bool>("pm_2co")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("pm_authorizenet")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("pm_citrus")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("pm_dps")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("pm_internal")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("pm_payfast")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("pm_paypalexp")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("pm_paypalpro")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("pm_paypalstd")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("pm_paytm")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("pm_sagepay")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("quotatpl")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("redeemucp")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("remotehostname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<sbyte>("renewday")
                        .HasColumnType("tinyint");

                    b.Property<bool>("resetctr")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("selfreg")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("selfreg_address")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("selfreg_city")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("selfreg_country")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("selfreg_email")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("selfreg_endupemail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("selfreg_endupmobile")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("selfreg_firstname")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("selfreg_lastname")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("selfreg_mobactsms")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("selfreg_mobile")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("selfreg_nameactemail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("selfreg_nameactsms")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("selfreg_phone")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("selfreg_state")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("selfreg_vatid")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("selfreg_zip")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("simuseselfreg")
                        .HasColumnType("int");

                    b.Property<bool>("smsexpiry")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("smsrenew")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("smswelcome")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("unixacc")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("unixhost")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("vatpercent")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.Property<long>("warncomb")
                        .HasColumnType("bigint");

                    b.Property<int>("warncombpercent")
                        .HasColumnType("int");

                    b.Property<long>("warndl")
                        .HasColumnType("bigint");

                    b.Property<int>("warndlpercent")
                        .HasColumnType("int");

                    b.Property<int>("warnexpiry")
                        .HasColumnType("int");

                    b.Property<bool>("warnmode")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("warnul")
                        .HasColumnType("bigint");

                    b.Property<int>("warnulpercent")
                        .HasColumnType("int");

                    b.Property<long>("warnuptime")
                        .HasColumnType("bigint");

                    b.Property<int>("warnuptimepercent")
                        .HasColumnType("int");

                    b.ToTable("Rm_settings");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.rm_specperacnt", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("connallowed")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("dlratio")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<TimeSpan>("endtime")
                        .HasColumnType("time");

                    b.Property<bool>("fri")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("mon")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("sat")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("srvid")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("starttime")
                        .HasColumnType("time");

                    b.Property<bool>("sun")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("thu")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("timeratio")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<bool>("tue")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("ulratio")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<bool>("wed")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("id");

                    b.HasIndex(new[] { "starttime" }, "fromtime");

                    b.HasIndex(new[] { "srvid" }, "srvid");

                    b.HasIndex(new[] { "endtime" }, "totime");

                    b.ToTable("Rm_specperacnt");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.rm_specperbw", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("dlburstlimit")
                        .HasColumnType("int");

                    b.Property<int>("dlburstthreshold")
                        .HasColumnType("int");

                    b.Property<int>("dlbursttime")
                        .HasColumnType("int");

                    b.Property<int>("dlrate")
                        .HasColumnType("int");

                    b.Property<bool>("enableburst")
                        .HasColumnType("tinyint(1)");

                    b.Property<TimeSpan>("endtime")
                        .HasColumnType("time");

                    b.Property<bool>("fri")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("mon")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("priority")
                        .HasColumnType("int");

                    b.Property<bool>("sat")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("srvid")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("starttime")
                        .HasColumnType("time");

                    b.Property<bool>("sun")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("thu")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("tue")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ulburstlimit")
                        .HasColumnType("int");

                    b.Property<int>("ulburstthreshold")
                        .HasColumnType("int");

                    b.Property<int>("ulbursttime")
                        .HasColumnType("int");

                    b.Property<int>("ulrate")
                        .HasColumnType("int");

                    b.Property<bool>("wed")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("id");

                    b.ToTable("Rm_specperbw");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.rm_syslog", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("data1")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime>("datetime")
                        .HasColumnType("datetime");

                    b.Property<int>("eventid")
                        .HasColumnType("int");

                    b.Property<string>("ip")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("id");

                    b.ToTable("Rm_syslog");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.rm_usergroups", b =>
                {
                    b.Property<int>("groupid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("descr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("groupname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("groupid")
                        .HasName("PRIMARY");

                    b.ToTable("Rm_usergroups");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.rm_users", b =>
                {
                    b.Property<string>("username")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("acctype")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("actcode")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("alertemail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("alertsms")
                        .HasColumnType("tinyint(1)");

                    b.Property<sbyte>("cardfails")
                        .HasColumnType("tinyint");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("cnic")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<long>("comblimit")
                        .HasColumnType("bigint");

                    b.Property<string>("comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("contractid")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("contractvalid")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("createdby")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("createdon")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("credits")
                        .HasPrecision(20, 2)
                        .HasColumnType("decimal(20,2)");

                    b.Property<string>("custattr")
                        .IsRequired()
                        .HasMaxLength(10240)
                        .HasColumnType("varchar(10240)");

                    b.Property<long>("downlimit")
                        .HasColumnType("bigint");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("enableuser")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("expiration")
                        .HasColumnType("datetime");

                    b.Property<string>("firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("gpslat")
                        .HasPrecision(17, 14)
                        .HasColumnType("decimal(17,14)");

                    b.Property<decimal>("gpslong")
                        .HasPrecision(17, 14)
                        .HasColumnType("decimal(17,14)");

                    b.Property<int>("groupid")
                        .HasColumnType("int");

                    b.Property<bool>("ipmodecm")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ipmodecpe")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("lang")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("lastlogoff")
                        .HasColumnType("datetime");

                    b.Property<string>("lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("mac")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("varchar(17)");

                    b.Property<string>("maccm")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("varchar(17)");

                    b.Property<string>("mobile")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("owner")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("poolidcm")
                        .HasColumnType("int");

                    b.Property<int>("poolidcpe")
                        .HasColumnType("int");

                    b.Property<sbyte>("pswactsmsnum")
                        .HasColumnType("tinyint");

                    b.Property<bool>("selfreg")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("srvid")
                        .HasColumnType("int");

                    b.Property<string>("state")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("staticipcm")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("staticipcpe")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("taxid")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<long>("uplimit")
                        .HasColumnType("bigint");

                    b.Property<long>("uptimelimit")
                        .HasColumnType("bigint");

                    b.Property<bool>("usemacauth")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("verified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("verifycode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<sbyte>("verifyfails")
                        .HasColumnType("tinyint");

                    b.Property<string>("verifymobile")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<sbyte>("verifysentnum")
                        .HasColumnType("tinyint");

                    b.Property<bool>("warningsent")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("zip")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.HasKey("username")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "acctype" }, "acctype");

                    b.HasIndex(new[] { "address" }, "address");

                    b.HasIndex(new[] { "city" }, "city");

                    b.HasIndex(new[] { "comment" }, "comment")
                        .HasDatabaseName("comment1")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 255 });

                    b.HasIndex(new[] { "company" }, "company");

                    b.HasIndex(new[] { "contractid" }, "contractid");

                    b.HasIndex(new[] { "contractvalid" }, "contractvalid");

                    b.HasIndex(new[] { "country" }, "country");

                    b.HasIndex(new[] { "createdon" }, "createdon");

                    b.HasIndex(new[] { "email" }, "email");

                    b.HasIndex(new[] { "enableuser" }, "enableuser");

                    b.HasIndex(new[] { "expiration" }, "expiration");

                    b.HasIndex(new[] { "firstname" }, "firstname");

                    b.HasIndex(new[] { "groupid" }, "groupid");

                    b.HasIndex(new[] { "lastlogoff" }, "lastlogoff");

                    b.HasIndex(new[] { "lastname" }, "lastname");

                    b.HasIndex(new[] { "mac" }, "mac");

                    b.HasIndex(new[] { "maccm" }, "maccm")
                        .HasDatabaseName("maccm1");

                    b.HasIndex(new[] { "mobile" }, "mobile");

                    b.HasIndex(new[] { "owner" }, "owner")
                        .HasDatabaseName("owner1");

                    b.HasIndex(new[] { "phone" }, "phone");

                    b.HasIndex(new[] { "srvid" }, "srvid")
                        .HasDatabaseName("srvid1");

                    b.HasIndex(new[] { "state" }, "state");

                    b.HasIndex(new[] { "staticipcm" }, "staticipcm")
                        .HasDatabaseName("staticipcm1");

                    b.HasIndex(new[] { "staticipcpe" }, "staticipcpe");

                    b.HasIndex(new[] { "zip" }, "zip");

                    b.ToTable("Rm_users");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ComCom_WebAPI.Models.DataMS.rm_wlan", b =>
                {
                    b.Property<string>("apip")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<short?>("ccq")
                        .HasColumnType("smallint");

                    b.Property<string>("maccpe")
                        .HasMaxLength(17)
                        .HasColumnType("varchar(17)");

                    b.Property<short?>("signal")
                        .HasColumnType("smallint");

                    b.Property<short?>("snr")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("timestamp")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasIndex(new[] { "maccpe" }, "maccpe");

                    b.ToTable("Rm_wlan");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });
#pragma warning restore 612, 618
        }
    }
}
